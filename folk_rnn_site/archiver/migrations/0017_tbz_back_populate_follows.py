# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-11-08 14:19
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from actstream import action, actions, registry

def forwards_func(apps, schema_editor):
    # FIXME: This throws...
    # ValueError: Cannot query "User object": Must be "User" instance.
    # ...when run. WTF.
    # - The same actions.follows code works in runserver
    # - Debugging shows the user is indeed a user object
    # - Same result passing in user object created by apps.get_model(settings.AUTH_USER_MODEL).get(id=tune.author.id)
    #
    # So, ah, run this manually, somehow.
    
    Tune = apps.get_model('archiver', 'Tune')
    registry.register(Tune)
    folkrnn_anon_submission_default_author_id = 1
    for tune in Tune.objects.all():
        if tune.author.id == folkrnn_anon_submission_default_author_id:
            continue
        actions.follow(tune.author, tune, actor_only=False, send_action=False)
    
    Setting = apps.get_model('archiver', 'Setting')
    registry.register(Setting)
    for setting in Setting.objects.all():
        actions.follow(setting.author, setting.tune, actor_only=False, send_action=False)
    
    Competition = apps.get_model('archiver', 'Competition')
    registry.register(Competition)
    CompetitionRecording = apps.get_model('archiver', 'CompetitionRecording')
    registry.register(CompetitionRecording)
    for cr in CompetitionRecording.objects.all():
        actions.follow(cr.recording.author, cr.competition, actor_only=False, send_action=False)
            
    TuneComment = apps.get_model('archiver', 'TuneComment')
    registry.register(TuneComment)
    for tc in TuneComment.objects.all():
        actions.follow(tc.author, tc.tune, actor_only=False, send_action=False)
    
    CompetitionComment = apps.get_model('archiver', 'CompetitionComment')
    registry.register(CompetitionComment)
    for cc in CompetitionComment.objects.all():
        actions.follow(cc.author, cc.competition, actor_only=False, send_action=False)
    
    Collection = apps.get_model('archiver', 'Collection')
    registry.register(Collection)
    CollectionEntry = apps.get_model('archiver', 'CollectionEntry')
    registry.register(CollectionEntry)
    for ce in CollectionEntry.objects.all():
        if ce.tune:
            actions.follow(ce.collection.user, ce.tune, actor_only=False, send_action=False)
        else:
            actions.follow(ce.collection.user, ce.setting, actor_only=False, send_action=False)
            
    CompetitionTuneVote = apps.get_model('archiver', 'CompetitionTuneVote')
    registry.register(CompetitionTuneVote)
    for ctv in CompetitionTuneVote.objects.all():
        actions.follow(ctv.user, ctv.votable.competition, actor_only=False, send_action=False)
        actions.follow(ctv.user, ctv.votable.tune, actor_only=False, send_action=False)
    
    CompetitionRecordingVote = apps.get_model('archiver', 'CompetitionRecordingVote')
    registry.register(CompetitionRecordingVote)
    for crv in CompetitionRecordingVote.objects.all():
        actions.follow(ctv.user, ctv.votable.competition, actor_only=False, send_action=False)
        actions.follow(crv.user, crv.votable.recording, actor_only=False, send_action=False)

class Migration(migrations.Migration):

    dependencies = [
        ('archiver', '0016_tbz_back_populate_activity'),
    ]

    operations = [
        # FIXME: NOOP! See above.
        migrations.RunPython(migrations.RunPython.noop, migrations.RunPython.noop),
    ]
