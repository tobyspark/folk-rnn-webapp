# -*- coding: utf-8 -*-
# Generated by Django 1.11.16 on 2018-11-08 14:19
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from actstream import action, registry

def forwards_func(apps, schema_editor):
    ## action.send(request.user, verb='submitted', action_object=setting)
    ## action.send(request.user, verb='made', action_object=comment, target=tune)
    ## action.send(request.user, verb='added', action_object=tune, target=request.user.tunebook)
    # action.send(request.user, verb='removed', action_object=tune, target=request.user.tunebook)
    ## action.send(request.user, verb='added', action_object=setting, target=request.user.tunebook)
    # action.send(request.user, verb='removed', action_object=setting, target=request.user.tunebook)
    ## action.send(request.user, verb='submitted', action_object=recording, target=competition)
    # action.send(request.user, verb='retracted their tune vote', action_object=competition)
    # action.send(request.user, verb='cast', action_object=vote)
    # action.send(request.user, verb='retracted their recording tune', action_object=competition)
    # action.send(request.user, verb='cast', action_object=vote)
    ## action.send(request.user, verb='made', action_object=comment, target=competition)
    ## action.send(request.user, verb='submitted', action_object=tune)
    ## action.send(request.user, verb='submitted', action_object=recording)
    ## action.send(request.user, verb='submitted', action_object=event)
    
    Tune = apps.get_model('archiver', 'Tune')
    registry.register(Tune)
    folkrnn_anon_submission_default_author_id = 1
    for tune in Tune.objects.all():
        if tune.author.id == folkrnn_anon_submission_default_author_id:
            continue
        action.send(tune.author, verb='submitted', action_object=tune, timestamp=tune.submitted)
    
    Setting = apps.get_model('archiver', 'Setting')
    registry.register(Setting)
    for setting in Setting.objects.all():
        action.send(setting.author, verb='submitted', action_object=setting, timestamp=setting.submitted)
    
    Recording = apps.get_model('archiver', 'Recording')
    registry.register(Recording)
    for recording in Recording.objects.all():
        action.send(recording.author, verb='submitted', action_object=recording, timestamp=recording.date)
    
    Event = apps.get_model('archiver', 'Event')
    registry.register(Event)
    for event in Event.objects.all():
        action.send(event.author, verb='submitted', action_object=event, timestamp=event.date)
    
    Competition = apps.get_model('archiver', 'Competition')
    registry.register(Competition)
    CompetitionRecording = apps.get_model('archiver', 'CompetitionRecording')
    registry.register(CompetitionRecording)
    for cr in CompetitionRecording.objects.all():
        action.send(cr.recording.author, verb='submitted', action_object=cr.recording, target=cr.competition, timestamp=cr.recording.date)
    
    TuneComment = apps.get_model('archiver', 'TuneComment')
    registry.register(TuneComment)
    for tc in TuneComment.objects.all():
        action.send(tc.author, verb='made', action_object=tc, target=tc.tune, timestamp=tc.submitted)
    
    CompetitionComment = apps.get_model('archiver', 'CompetitionComment')
    registry.register(CompetitionComment)
    for cc in CompetitionComment.objects.all():
        action.send(cc.author, verb='made', action_object=cc, target=cc.competition, timestamp=cc.submitted)
    
    Collection = apps.get_model('archiver', 'Collection')
    registry.register(Collection)
    CollectionEntry = apps.get_model('archiver', 'CollectionEntry')
    registry.register(CollectionEntry)
    for ce in CollectionEntry.objects.all():
        action.send(ce.collection.user, verb='added', action_object=ce.tune if ce.tune else ce.setting, target=ce.collection, timestamp=ce.submitted)
    
    CompetitionTuneVote = apps.get_model('archiver', 'CompetitionTuneVote')
    registry.register(CompetitionTuneVote)
    for ctv in CompetitionTuneVote.objects.all():
        action.send(ctv.user, verb='cast', action_object=ctv, timestamp=ctv.submitted)
    
    CompetitionRecordingVote = apps.get_model('archiver', 'CompetitionRecordingVote')
    registry.register(CompetitionRecordingVote)
    for crv in CompetitionRecordingVote.objects.all():
        action.send(crv.user, verb='cast', action_object=crv, timestamp=crv.submitted)

def reverse_func(apps, schema_editor):
    pass # hack to allow dev of back population

class Migration(migrations.Migration):

    dependencies = [
        ('archiver', '0015_tbz_tunebookentry_to_collectionentry'),
        ('actstream', '0002_remove_action_data')
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
